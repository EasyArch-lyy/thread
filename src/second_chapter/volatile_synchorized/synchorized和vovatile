synchorized：原子性内置锁，线程执行进入sync代码块前自动获取内部锁，其他线程访问会被阻塞挂起，拿到锁的
线程会在正常退出或抛异常后或同步块内调用了wait释放内置锁，其他线程才能获得锁（排他锁），JAVA线程与操作系统
原生线程一一对应，线程阻塞需从用户态切换到内核态，导致上下文切换

volatile：确保对一个变量的更新对其他线程立马可见，线程在写入变量时不会把值缓存在寄存器，立马刷新回主存。
同时是线程不安全的，没用采取同步方式,确保volatile写之前的操作不会被编译器重排序到volatile之后，之后的
读操作不会排序到之前
