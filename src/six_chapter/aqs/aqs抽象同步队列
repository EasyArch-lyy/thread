AQS: FIFO双向队列，通过head和tail记录队首位元素，元素类型node
  enq(final Node node 方法将该节点插入到 AQS 的阻塞队列)
    node  thread    用来存放进入AQS队列的线程
          SHARED    标识该线程是获取共享资源是被阻塞挂起放入AQS
          EXCLUSIVE 用来标记线程是获取独占资源时被挂起后放入AQS队列的
          waitStatus记录当前线程等待状态(CANCELLED取消，SIGNAL需要唤醒，prev当前节点的前驱节点，bext后继)
    state  对于ReentranLock可以表示当前线程的重入次数
           对于ReentranReadWrite，state高16位标识读状态，低16位表示获取到写锁的线程可重入次数
           对于semaphore，state表示当前可用信号个数
           对应CountDownlatch，表示计数器当前的值
    ConditionObject  用来结合锁实现线程同步
                     直接访问AQS对象内部的变量


    当多个线程同时调用lock.lock()方法获取锁时，只有一个线程获取到了锁，其他线程会被转化位Node节点插入lock锁对应的AQS阻塞队列，作自旋尝试获取锁
如果获取到锁的线程又调用了对应的条件变量的 await（）方法，则该线程会释放获取到的锁，并被转换为 Node 节点插入到条件变量对应的条件队列里面
当另外一个线程调用条件变量signa()或者signalAll()方法时，条件队列里面一个或者全部Node点移动到AQS的阻塞队列里面等待时机获取锁


独占方式下
=================
@获取过程
//使用tryAcquire尝试获取资源(设置state的值)成功直接返回，失败将该线程封装为Node.EXCLUSIVE的node节点插入AQS阻塞队列尾部，调用LockSupport.park(this)将自己挂起
public final void acquire(int arg){
    if(!tryAcquire(arg) && acquireQueued(addWaiter(Node.EXCLUSIVE),arg))
    selfInterrupt();
}

@调用release(int arg)
//尝试使用tryRelease操作释放资源，调用LockSupport.unpark(thread)激活AQS队列一个线程,再使用tryAcquire尝试
public final boolean release(int arg){
    if(tryRelease(arg)){
        Node h =head;
        if(h != null && h.waitStatus != 0)
            unparkSuccessor(h);
        return true;
    }
    return fales;
}


共享方式下
=================
@获取资源
public final void acquireShared(int arg){
    if(tryAcquireShared(arg)<0)
        doAcquireShared(arg);
}
@release
public final boolean releaseShared(int arg){
    if(tryReleaseShared(arg)){
        doReleaseShared();
        return true;
    }
    return false;
}


